system:
  name: "{{ cookiecutter.project_name }}"
  version: "{{ cookiecutter.version }}"
  environment: "development"

database:
  type: "postgresql"
  host: "localhost"
  port: 5432
  name: "multiagent_db"
  username: "admin"
  password: "password"

agents:
  default_timeout: 30
  max_retries: 3
  retry_delay: 1


LOGGING:
  # For backend logging
  BASE_DIR: logs/backend_logs/
  LOG_FILE: backend.log
  TIME_LOG: "timings.logs"
  LOG_LEVEL: DEBUG # INFO, DEBUG, WARNING, ERROR, CRITICAL
  THIRD_PARTY_LOGGER_LEVEL: WARNING # INFO, DEBUG, WARNING, ERROR, CRITICAL
  LOG_FORMAT: "%(asctime)s - %(levelname)s - %(filename)s - %(funcName)s - line %(lineno)d - %(message)s"
  ROTATION: '1 day' # '1 day', '1 week', '1 month', etc.
  BACKUP_COUNT: 5 # Number of backup files to keep
  log_group: "/ecs/multi_agent" # For AWS CloudWatch logging, change it to your log group name
  GET_AWS_WATCHTOWER: False # Set to True if you want to use AWS CloudWatch for logging, otherwise set to False
  
  # For server logging
  # need to define it
  SERVER_BASE_DIR: logs/server_logs/
  SERVER_LOG_FILE: server.log
  SERVER_LOG_LEVEL: DEBUG # INFO, DEBUG, WARNING, ERROR, CRITICAL
  SERVER_THIRD_PARTY_LOGGER_LEVEL: WARNING # INFO, DEBUG, WARNING, ERROR, CRITICAL
  SERVER_LOG_FORMAT: "%(asctime)s - %(levelname)s - %(filename)s - %(funcName)s - line %(lineno)d - %(message)s"  
  SERVER_ROTATION: '1 day' # '1 day', '1 week', '1 month', etc.
  SERVER_BACKUP_COUNT: 5 # Number of backup files to keep
  

MODEL:
  FAMILY: "gpt"
  MODEL_NAME: "gpt-4.1-nano"
  TEMPERATURE: 0.2